"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DeviceTypeListener: () => DeviceTypeListener,
  FullscreenListener: () => FullscreenListener,
  JoystickArea: () => JoystickArea,
  KeyboardListener: () => KeyboardListener,
  Listeners: () => Listeners,
  MouseButtonsListener: () => MouseButtonsListener,
  MouseMoveListener: () => MouseMoveListener,
  MouseScrollListener: () => MouseScrollListener,
  PageFocusListener: () => PageFocusListener,
  PageVisibilityListener: () => PageVisibilityListener,
  PointerLockListener: () => PointerLockListener,
  ResizeListener: () => ResizeListener,
  ScreenOrientationListener: () => ScreenOrientationListener,
  useBrowser: () => useBrowser,
  useJoysticks: () => useJoysticks,
  useKeyboard: () => useKeyboard,
  useMainLoop: () => useMainLoop,
  useMouse: () => useMouse
});
module.exports = __toCommonJS(src_exports);

// src/react-loops.ts
var import_react = require("react");
var import_core = require("@manapotion/core");
var useMainLoop = (callback, options) => {
  (0, import_react.useEffect)(() => (0, import_core.addMainLoopEffect)(callback, options), []);
};

// src/listeners/DeviceTypeListener.tsx
var import_react2 = require("react");
var import_core2 = require("@manapotion/core");
var DeviceTypeListener = ({ onDeviceTypeChange }) => {
  (0, import_react2.useEffect)(() => (0, import_core2.mountDeviceTypeListener)({ onDeviceTypeChange }), []);
  return null;
};

// src/listeners/FullscreenListener.tsx
var import_react3 = require("react");
var import_core3 = require("@manapotion/core");
var FullscreenListener = ({ onFullscreenChange }) => {
  (0, import_react3.useEffect)(() => (0, import_core3.mountFullscreenListener)({ onFullscreenChange }), []);
  return null;
};

// src/listeners/KeyboardListener.tsx
var import_react4 = require("react");
var import_core4 = require("@manapotion/core");
var KeyboardListener = ({ onKeyDown, onKeyUp }) => {
  (0, import_react4.useEffect)(() => (0, import_core4.mountKeyboardListener)({ onKeyDown, onKeyUp }), []);
  return null;
};

// src/listeners/MouseButtonsListener.tsx
var import_react5 = require("react");
var import_core5 = require("@manapotion/core");
var MouseButtonsListener = ({
  onLeftMouseButtonDown,
  onMiddleMouseButtonDown,
  onRightMouseButtonDown,
  onLeftMouseButtonUp,
  onMiddleMouseButtonUp,
  onRightMouseButtonUp
}) => {
  (0, import_react5.useEffect)(
    () => (0, import_core5.mountMouseButtonsListener)({
      onLeftMouseButtonDown,
      onMiddleMouseButtonDown,
      onRightMouseButtonDown,
      onLeftMouseButtonUp,
      onMiddleMouseButtonUp,
      onRightMouseButtonUp
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  return null;
};

// src/listeners/MouseMoveListener.tsx
var import_react6 = require("react");
var import_core6 = require("@manapotion/core");
var MouseMoveListener = ({
  mouseMovementResetDelay,
  onMouseMove
}) => {
  (0, import_react6.useEffect)(
    () => (0, import_core6.mountMouseMoveListener)({ onMouseMove, mouseMovementResetDelay }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mouseMovementResetDelay]
  );
  return null;
};

// src/listeners/MouseScrollListener.tsx
var import_react7 = require("react");
var import_core7 = require("@manapotion/core");
var MouseScrollListener = ({
  onScroll,
  mouseScrollResetDelay
}) => {
  (0, import_react7.useEffect)(
    () => (0, import_core7.mountMouseScrollListener)({ onScroll, mouseScrollResetDelay }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mouseScrollResetDelay]
  );
  return null;
};

// src/listeners/PageFocusListener.tsx
var import_react8 = require("react");
var import_core8 = require("@manapotion/core");
var PageFocusListener = ({ onPageFocusChange }) => {
  (0, import_react8.useEffect)(() => (0, import_core8.mountPageFocusListener)({ onPageFocusChange }), []);
  return null;
};

// src/listeners/PageVisibilityListener.tsx
var import_react9 = require("react");
var import_core9 = require("@manapotion/core");
var PageVisibilityListener = ({ onPageVisibilityChange }) => {
  (0, import_react9.useEffect)(() => (0, import_core9.mountPageVisibilityListener)({ onPageVisibilityChange }), []);
  return null;
};

// src/listeners/PointerLockListener.tsx
var import_react10 = require("react");
var import_core10 = require("@manapotion/core");
var PointerLockListener = ({ onPointerLockChange }) => {
  (0, import_react10.useEffect)(() => (0, import_core10.mountPointerLockListener)({ onPointerLockChange }), []);
  return null;
};

// src/listeners/ResizeListener.tsx
var import_react11 = require("react");
var import_core11 = require("@manapotion/core");
var ResizeListener = ({ onResize }) => {
  (0, import_react11.useEffect)(() => (0, import_core11.mountResizeListener)({ onResize }), []);
  return null;
};

// src/listeners/ScreenOrientationListener.tsx
var import_react12 = require("react");
var import_core12 = require("@manapotion/core");
var ScreenOrientationListener = ({
  onScreenOrientationChange
}) => {
  (0, import_react12.useEffect)(() => (0, import_core12.mountScreenOrientationListener)({ onScreenOrientationChange }), []);
  return null;
};

// src/Listeners.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Listeners = ({
  mouseMovementResetDelay,
  onMouseMove,
  onPageVisibilityChange,
  onPageFocusChange,
  onPointerLockChange,
  onFullscreenChange,
  onResize,
  onDeviceTypeChange,
  onScreenOrientationChange,
  onLeftMouseButtonDown,
  onMiddleMouseButtonDown,
  onRightMouseButtonDown,
  onLeftMouseButtonUp,
  onMiddleMouseButtonUp,
  onRightMouseButtonUp,
  onScroll,
  mouseScrollResetDelay,
  onKeyDown,
  onKeyUp
}) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    MouseMoveListener,
    {
      mouseMovementResetDelay,
      onMouseMove
    }
  ),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PageVisibilityListener, { onPageVisibilityChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PageFocusListener, { onPageFocusChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PointerLockListener, { onPointerLockChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FullscreenListener, { onFullscreenChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ResizeListener, { onResize }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceTypeListener, { onDeviceTypeChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ScreenOrientationListener, { onScreenOrientationChange }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    MouseButtonsListener,
    {
      onLeftMouseButtonDown,
      onMiddleMouseButtonDown,
      onRightMouseButtonDown,
      onLeftMouseButtonUp,
      onMiddleMouseButtonUp,
      onRightMouseButtonUp
    }
  ),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(KeyboardListener, { onKeyDown, onKeyUp }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MouseScrollListener, { onScroll, mouseScrollResetDelay })
] });

// src/react-store.ts
var import_core13 = require("@manapotion/core");
var import_zustand = require("zustand");
function useBrowser(selector) {
  return (0, import_zustand.useStore)(import_core13.browserStore, selector);
}
function useMouse(selector) {
  return (0, import_zustand.useStore)(import_core13.mouseStore, selector);
}
function useKeyboard(selector) {
  return (0, import_zustand.useStore)(import_core13.keyboardStore, selector);
}
function useJoysticks(selector) {
  return (0, import_zustand.useStore)(import_core13.joysticksStore, selector);
}

// src/JoystickArea.tsx
var import_react13 = require("react");
var import_core14 = require("@manapotion/core");
var import_jsx_runtime2 = require("react/jsx-runtime");
function mergeRefs(refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ;
        ref.current = value;
      }
    });
  };
}
var JoystickAreaBase = ({
  mode,
  joystick,
  maxFollowDistance,
  maxOriginDistance,
  onEnd,
  onMove,
  onStart,
  containerProps,
  children
}, ref) => {
  const localRef = (0, import_react13.useRef)(null);
  const mergedRefs = mergeRefs([localRef, ref]);
  (0, import_react13.useEffect)(
    () => (0, import_core14.mountJoystickArea)({
      mode,
      joystick,
      maxFollowDistance,
      maxOriginDistance,
      onEnd,
      onMove,
      onStart,
      element: localRef.current
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mode, joystick, maxFollowDistance, maxOriginDistance]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { ref: mergedRefs, ...containerProps, children });
};
var JoystickArea = (0, import_react13.forwardRef)(JoystickAreaBase);
JoystickArea.displayName = "JoystickArea";

// src/index.ts
__reExport(src_exports, require("@manapotion/core"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DeviceTypeListener,
  FullscreenListener,
  JoystickArea,
  KeyboardListener,
  Listeners,
  MouseButtonsListener,
  MouseMoveListener,
  MouseScrollListener,
  PageFocusListener,
  PageVisibilityListener,
  PointerLockListener,
  ResizeListener,
  ScreenOrientationListener,
  useBrowser,
  useJoysticks,
  useKeyboard,
  useMainLoop,
  useMouse,
  ...require("@manapotion/core")
});
