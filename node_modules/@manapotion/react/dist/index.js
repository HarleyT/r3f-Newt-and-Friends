// src/react-loops.ts
import { useEffect } from "react";
import { addMainLoopEffect } from "@manapotion/core";
var useMainLoop = (callback, options) => {
  useEffect(() => addMainLoopEffect(callback, options), []);
};

// src/listeners/DeviceTypeListener.tsx
import { useEffect as useEffect2 } from "react";
import { mountDeviceTypeListener } from "@manapotion/core";
var DeviceTypeListener = ({ onDeviceTypeChange }) => {
  useEffect2(() => mountDeviceTypeListener({ onDeviceTypeChange }), []);
  return null;
};

// src/listeners/FullscreenListener.tsx
import { useEffect as useEffect3 } from "react";
import { mountFullscreenListener } from "@manapotion/core";
var FullscreenListener = ({ onFullscreenChange }) => {
  useEffect3(() => mountFullscreenListener({ onFullscreenChange }), []);
  return null;
};

// src/listeners/KeyboardListener.tsx
import { useEffect as useEffect4 } from "react";
import { mountKeyboardListener } from "@manapotion/core";
var KeyboardListener = ({ onKeyDown, onKeyUp }) => {
  useEffect4(() => mountKeyboardListener({ onKeyDown, onKeyUp }), []);
  return null;
};

// src/listeners/MouseButtonsListener.tsx
import { useEffect as useEffect5 } from "react";
import { mountMouseButtonsListener } from "@manapotion/core";
var MouseButtonsListener = ({
  onLeftMouseButtonDown,
  onMiddleMouseButtonDown,
  onRightMouseButtonDown,
  onLeftMouseButtonUp,
  onMiddleMouseButtonUp,
  onRightMouseButtonUp
}) => {
  useEffect5(
    () => mountMouseButtonsListener({
      onLeftMouseButtonDown,
      onMiddleMouseButtonDown,
      onRightMouseButtonDown,
      onLeftMouseButtonUp,
      onMiddleMouseButtonUp,
      onRightMouseButtonUp
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  return null;
};

// src/listeners/MouseMoveListener.tsx
import { useEffect as useEffect6 } from "react";
import { mountMouseMoveListener } from "@manapotion/core";
var MouseMoveListener = ({
  mouseMovementResetDelay,
  onMouseMove
}) => {
  useEffect6(
    () => mountMouseMoveListener({ onMouseMove, mouseMovementResetDelay }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mouseMovementResetDelay]
  );
  return null;
};

// src/listeners/MouseScrollListener.tsx
import { useEffect as useEffect7 } from "react";
import { mountMouseScrollListener } from "@manapotion/core";
var MouseScrollListener = ({
  onScroll,
  mouseScrollResetDelay
}) => {
  useEffect7(
    () => mountMouseScrollListener({ onScroll, mouseScrollResetDelay }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mouseScrollResetDelay]
  );
  return null;
};

// src/listeners/PageFocusListener.tsx
import { useEffect as useEffect8 } from "react";
import { mountPageFocusListener } from "@manapotion/core";
var PageFocusListener = ({ onPageFocusChange }) => {
  useEffect8(() => mountPageFocusListener({ onPageFocusChange }), []);
  return null;
};

// src/listeners/PageVisibilityListener.tsx
import { useEffect as useEffect9 } from "react";
import { mountPageVisibilityListener } from "@manapotion/core";
var PageVisibilityListener = ({ onPageVisibilityChange }) => {
  useEffect9(() => mountPageVisibilityListener({ onPageVisibilityChange }), []);
  return null;
};

// src/listeners/PointerLockListener.tsx
import { useEffect as useEffect10 } from "react";
import { mountPointerLockListener } from "@manapotion/core";
var PointerLockListener = ({ onPointerLockChange }) => {
  useEffect10(() => mountPointerLockListener({ onPointerLockChange }), []);
  return null;
};

// src/listeners/ResizeListener.tsx
import { useEffect as useEffect11 } from "react";
import { mountResizeListener } from "@manapotion/core";
var ResizeListener = ({ onResize }) => {
  useEffect11(() => mountResizeListener({ onResize }), []);
  return null;
};

// src/listeners/ScreenOrientationListener.tsx
import { useEffect as useEffect12 } from "react";
import { mountScreenOrientationListener } from "@manapotion/core";
var ScreenOrientationListener = ({
  onScreenOrientationChange
}) => {
  useEffect12(() => mountScreenOrientationListener({ onScreenOrientationChange }), []);
  return null;
};

// src/Listeners.tsx
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var Listeners = ({
  mouseMovementResetDelay,
  onMouseMove,
  onPageVisibilityChange,
  onPageFocusChange,
  onPointerLockChange,
  onFullscreenChange,
  onResize,
  onDeviceTypeChange,
  onScreenOrientationChange,
  onLeftMouseButtonDown,
  onMiddleMouseButtonDown,
  onRightMouseButtonDown,
  onLeftMouseButtonUp,
  onMiddleMouseButtonUp,
  onRightMouseButtonUp,
  onScroll,
  mouseScrollResetDelay,
  onKeyDown,
  onKeyUp
}) => /* @__PURE__ */ jsxs(Fragment, { children: [
  /* @__PURE__ */ jsx(
    MouseMoveListener,
    {
      mouseMovementResetDelay,
      onMouseMove
    }
  ),
  /* @__PURE__ */ jsx(PageVisibilityListener, { onPageVisibilityChange }),
  /* @__PURE__ */ jsx(PageFocusListener, { onPageFocusChange }),
  /* @__PURE__ */ jsx(PointerLockListener, { onPointerLockChange }),
  /* @__PURE__ */ jsx(FullscreenListener, { onFullscreenChange }),
  /* @__PURE__ */ jsx(ResizeListener, { onResize }),
  /* @__PURE__ */ jsx(DeviceTypeListener, { onDeviceTypeChange }),
  /* @__PURE__ */ jsx(ScreenOrientationListener, { onScreenOrientationChange }),
  /* @__PURE__ */ jsx(
    MouseButtonsListener,
    {
      onLeftMouseButtonDown,
      onMiddleMouseButtonDown,
      onRightMouseButtonDown,
      onLeftMouseButtonUp,
      onMiddleMouseButtonUp,
      onRightMouseButtonUp
    }
  ),
  /* @__PURE__ */ jsx(KeyboardListener, { onKeyDown, onKeyUp }),
  /* @__PURE__ */ jsx(MouseScrollListener, { onScroll, mouseScrollResetDelay })
] });

// src/react-store.ts
import {
  browserStore,
  joysticksStore,
  keyboardStore,
  mouseStore
} from "@manapotion/core";
import { useStore } from "zustand";
function useBrowser(selector) {
  return useStore(browserStore, selector);
}
function useMouse(selector) {
  return useStore(mouseStore, selector);
}
function useKeyboard(selector) {
  return useStore(keyboardStore, selector);
}
function useJoysticks(selector) {
  return useStore(joysticksStore, selector);
}

// src/JoystickArea.tsx
import {
  forwardRef,
  useEffect as useEffect13,
  useRef
} from "react";
import { mountJoystickArea } from "@manapotion/core";
import { jsx as jsx2 } from "react/jsx-runtime";
function mergeRefs(refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ;
        ref.current = value;
      }
    });
  };
}
var JoystickAreaBase = ({
  mode,
  joystick,
  maxFollowDistance,
  maxOriginDistance,
  onEnd,
  onMove,
  onStart,
  containerProps,
  children
}, ref) => {
  const localRef = useRef(null);
  const mergedRefs = mergeRefs([localRef, ref]);
  useEffect13(
    () => mountJoystickArea({
      mode,
      joystick,
      maxFollowDistance,
      maxOriginDistance,
      onEnd,
      onMove,
      onStart,
      element: localRef.current
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [mode, joystick, maxFollowDistance, maxOriginDistance]
  );
  return /* @__PURE__ */ jsx2("div", { ref: mergedRefs, ...containerProps, children });
};
var JoystickArea = forwardRef(JoystickAreaBase);
JoystickArea.displayName = "JoystickArea";

// src/index.ts
export * from "@manapotion/core";
export {
  DeviceTypeListener,
  FullscreenListener,
  JoystickArea,
  KeyboardListener,
  Listeners,
  MouseButtonsListener,
  MouseMoveListener,
  MouseScrollListener,
  PageFocusListener,
  PageVisibilityListener,
  PointerLockListener,
  ResizeListener,
  ScreenOrientationListener,
  useBrowser,
  useJoysticks,
  useKeyboard,
  useMainLoop,
  useMouse
};
